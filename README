nested-sharedlib-fun

Yeah ... fun for those spending hours delving into linker operation. 

This little collection of projects was motivated by a requirement
to port an old legacy code based, compiled for 32 bit and Debian 7, to
Ubuntu 16.04, 64 bit. Linker behavior is subtly different between
these two environments, and not in a way conducive to developer comfort.

Projects In This Repo:

libp1:

A simple, non-libtoolized library used by proj1. 

Build instructions:

cd libp1
./makelib.sh

proj1:

A sample application that tested procedures for resolving certain issues
related to linking applications to share libraries that linked to other
shared libraries. (See proj1/README.) This depends on an installation xbinder,
version 2.6.0. To build it requires 
  1) An installation of xbinder 
  2) Modification of proj1/share/m4/lpc_xbinder.m4 to change xbinder_root
    to a value consistent with your xbinder installation. 

AC_DEFUN([LPC_XBINDER],[
  xbinder_root=<path to your Xbinder location>/xbv260
  xbinder_includes=$xbinder_root
  AC_SUBST(xbinder_includes)

To build:

cd proj1
autoconf
automake
./configure
make

To run the test application:

src/prog1/prog1

See proj1/README for details.

circular:

Some legacy systems were built with circular dependencies between custom
shared libraries. In particular, shared libA could refer to shared libB. Let's
say shared libB depends on A, so libA must be built first. But let's further
presume libA makes reference to items in libB ... 

In certain legacy Debian 7 code bases, libB would be linked with explicit
reference to libA but libA would not be linked to libB (which wouldn't exist
yet in the make all build process anyway). So libB would have a DT_NEEDED
entry referencing to LibA, but libA would NOT have a DT_NEEDED record
referencing libB. In Debian7, the linker would resolve this at application
link time but this evidently doesn't work in Ubuntu 16.04. 

This project explores methods for working around that issue.

Note: This project does NOT depend on xbinder.

To build:

cd circular
autoconf
automake
./configure
make

To run the applications:

src/app1/app1
src/app2/app2

See circular/README for details.



